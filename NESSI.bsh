import arc.api.device.ArcReplyException;
import owl.CCParams.CCScriptFrame;
import owl.main.owltypes.OwlBoldButton;
import owl.main.owltypes.OwlNumberField;
import owl.gui.utils.OwlUtilities;
import owl.main.setup.SetupEvent;
import owl.main.setup.SetupListener;
import owl.main.setup.SetupFrame;
import owl.main.MainApp;
import owl.main.MainFrame;

import java.awt.event.ActionEvent;
import javax.swing.JButton;

import arc.api.device.ArcDeviceJAPI;

import java.net.Socket;
import java.io.Scanner;

public class TemplateFrame extends CCScriptFrame implements SetupListener
{
	private final String RUN_ACTION	 =	"RUN";

	JToolBar			m_toolbar;
	
	// Text fields that we'll need to access to call subthreads
	OwlNumberField rampField;
	OwlNumberField pointField;
	OwlNumberField delayField;
    
	public TemplateFrame()
	{
		super( "NESSI H2RG Control" );

		m_toolbar = new JToolBar();
		m_toolbar.setFloatable( false );

		super.appendToolbar( m_toolbar );

		getContentPane().add( m_toolbar, BorderLayout.PAGE_START );
		getContentPane().add( createComponents(), BorderLayout.CENTER );

		SetupFrame.addSetupListener( this );

		pack();
		OwlUtilities.centerFrame( this );

		loadPreferences();
	}

	public void destroy()
	{
		dispose();
	}

	public void actionPerformed( ActionEvent event )
	{
		if ( event.getActionCommand().equals( RUN_ACTION ) )
		{
			// Disable image sensor reset
			ArcDeviceJAPI.Cmd( ArcDeviceJAPI.TIM_ID, 0x53524D, 0, ArcDeviceJAPI.DON );
			logger.info("Disabled reset of imager")

			// Create/retrieve objects needed to click Expose button
			source = new Object();
			frame = MainApp.getMainFrame();
			ourAction = new ActionEvent(source, 0, "EXPOSE");
			exposePanel = frame.getExposePanel();

			// Estimate ramp execution time
			exposeTime = exposePanel.getExposeTime();
			delayTime = (((exposeTime * 1000) + 425) * pointField.getInt()) + (delayField.getFloat() * 1000);
			logger.info("Calculated ramp time: " + delayTime);

			// Set "abort requested" flag - bsh.shared is, well, shared.
			bsh.shared.abort = false;

			// Here we are creating a Runnable implementation in the beanshell way
			ExposerRunnable (ramps, delayTime, frame, ourAction)  {
				run() {
		
					// Ramp execution
					for(i = 0; i < this.ramps; i++) {
						// Update telemetry

						//	fitsHeaderFrame.addField(keyword, fitsObject.getString(keyword))

						// start exposure and wait for it to finish
						frame.actionPerformed(this.ourAction);
						Thread.sleep((int)this.delayTime);
						logger.info("Completed ramp " + (i+1));
						
						// Check abort flag
						if(bsh.shared.abort) {
							break;
						}
					}

				}
				return this;
			}
			Runnable r = ExposerRunnable(rampField.getInt(), delayTime, frame, ourAction);
			new Thread(r).start();
		}
		
		else if ( event.getActionCommand().equals("ABORT") ) {
			bsh.shared.abort = true;
		}

		else
		{
			super.actionPerformed( event );
		}
	}

	public void setupChanged( SetupEvent event )
	{
	}

	private JButton createButton( String buttonText, String cmdFlag )
	{
		JButton jButton = new JButton( buttonText );

		jButton.setPreferredSize( new Dimension( 80, 25 ) );
		jButton.setActionCommand( cmdFlag );
		jButton.addActionListener( this );

		return jButton;
	}

	private JButton createButton( String buttonText, String cmdFlag, int width, int height)
	{
		JButton jButton = new JButton( buttonText );

		jButton.setPreferredSize( new Dimension( width, height ) );
		jButton.setActionCommand( cmdFlag );
		jButton.addActionListener( this );

		return jButton;
	}

	private JPanel createComponents()
	{
		JPanel panel = new JPanel();
		panel.setLayout( new GridBagLayout() );
		GridBagConstraints c = new GridBagConstraints();
		// Grid x = 1 will be fields, x = 2 will be descriptions
		// Generic layout thaht will be shared
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy = 0;

		// Number of Ramps Control
		rampField = new OwlNumberField( "1", 10 );
		c.gridx = 0;
		panel.add( rampField, c );
		c.gridx = 1;
		panel.add( new JLabel( "Number of ramps" ), c );
		c.gridy++;

		// Number of Points Control
		pointField = new OwlNumberField( "1", 10 );
		c.gridx = 0;
		panel.add( pointField, c );
		c.gridx = 1;
		panel.add( new JLabel( "Exposure Count" ), c );
		c.gridy++;

		// Add'l Delay
		delayField = new OwlNumberField( "0.5", 10);
		c.gridx = 0;
		panel.add( delayField, c);
		c.gridx = 1;
		panel.add( new JLabel ("Interramp Delay"), c );
		c.gridy++;

		// Expose Button
		c.gridx = 0;
		panel.add( createButton( "Expose", RUN_ACTION ), c );

		c.gridx = 0;
		c.gridy++;
		panel.add( createButton( "Abort", "ABORT" ), c );
		
		return panel;
	}
}

frame = ( CCScriptFrame )( new TemplateFrame() );
frame.setVisible( true );
