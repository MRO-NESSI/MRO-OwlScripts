import arc.api.device.ArcReplyException;
import owl.CCParams.CCScriptFrame;
import owl.main.owltypes.OwlBoldButton;
import owl.main.owltypes.OwlNumberField;
import owl.gui.utils.OwlUtilities;
import owl.main.setup.SetupEvent;
import owl.main.setup.SetupListener;
import owl.main.setup.SetupFrame;
import owl.main.MainApp;

import arc.api.fits.ArcFitsFileJAPI;
import arc.api.device.ArcDeviceJAPI;
import arc.api.device.ArcReplyException;
import arc.api.deinterlace.ArcDeinterlaceJAPI;

/*Note to self: Don't make this runnable. Have a different file for
every action that may be performed. What's more, make a single file
to be the library of H2RG commands. Make sure we can import in a sane
way.*/

public class TemplateFrame extends CCScriptFrame implements SetupListener
{
	private final String RUN_ACTION	 =	"RUN";

	JToolBar			m_toolbar;
	
	// Text fields that we'll need to access to call subthreads
	OwlNumberField rampControlField;
	OwlNumberField pointControlField;
	OwlNumberField timeControlField;
    
	public TemplateFrame()
	{
		super( "NESSI H2RG Control" );

		m_toolbar = new JToolBar();
		m_toolbar.setFloatable( false );

		super.appendToolbar( m_toolbar );

		getContentPane().add( m_toolbar, BorderLayout.PAGE_START );
		getContentPane().add( createComponents(), BorderLayout.CENTER );

		SetupFrame.addSetupListener( this );

		pack();
		OwlUtilities.centerFrame( this );

		loadPreferences();
	}

	public void destroy()
	{
		dispose();
	}

	public void actionPerformed( ActionEvent event )
	{
		if ( event.getActionCommand().equals( RUN_ACTION ) )
		{
			// Read in the file with TestRunner
			interp.source( "TestRunner.bsh" );
			System.out.println("Starting configuration thread...");
			Thread configThread = new Thread(new TestRunner());
			configThread.start();
		}

		else
		{
			super.actionPerformed( event );
		}
	}

	public void setupChanged( SetupEvent event )
	{
	}

	private JButton createButton( String buttonText, String cmdFlag )
	{
		JButton jButton = new JButton( buttonText );

		jButton.setPreferredSize( new Dimension( 80, 25 ) );
		jButton.setActionCommand( cmdFlag );
		jButton.addActionListener( this );

		return jButton;
	}

	private JButton createButton( String buttonText, String cmdFlag, int width, int height)
	{
		JButton jButton = new JButton( buttonText );

		jButton.setPreferredSize( new Dimension( width, height ) );
		jButton.setActionCommand( cmdFlag );
		jButton.addActionListener( this );

		return jButton;
	}

	private JPanel createComponents()
	{
		JPanel panel = new JPanel();
		panel.setLayout( new GridBagLayout() );
		GridBagConstraints c = new GridBagConstraints();
		// Grid x = 1 will be fields, x = 2 will be descriptions
		// Generic layout thaht will be shared
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy = 0;

		// Number of Ramps Control
		rampControlField = new OwlNumberField( "0", 10 );
		c.gridx = 0;
		panel.add( rampControlField, c );
		c.gridx = 1;
		panel.add( new JLabel( "Number of ramps" ), c );
		c.gridy++;

		// Number of Points Control
		pointControlField = new OwlNumberField( "1", 10 );
		c.gridx = 0;
		panel.add( pointControlField, c );
		c.gridx = 1;
		panel.add( new JLabel( "Number of Points on Ramp" ), c );
		c.gridy++;
	
		// Ramp Time Control
		timeControlField = new OwlNumberField( "1", 10);
		c.gridx = 0;
		panel.add( timeControlField, c );
		c.gridx = 1;
		panel.add( new JLabel( "Ramp Time" ), c );
		c.gridy++;

		// Expose Button
		c.gridx = 0;
		panel.add( createButton( "Expose", RUN_ACTION ), c );
		
		return panel;
	}
}

frame = ( CCScriptFrame )( new TemplateFrame() );
frame.setVisible( true );
