import javax.swing.border.TitledBorder;
import arc.api.device.ArcDeviceJAPI;
import arc.api.device.ArcReplyException;
import owl.CCParams.CCScriptFrame;
import owl.main.owltypes.OwlBoldButton;
import owl.main.owltypes.OwlNumberField;
import owl.gui.utils.OwlUtilities;
import owl.main.setup.SetupEvent;
import owl.main.setup.SetupListener;
import owl.main.setup.SetupFrame;
import owl.main.MainApp;

import arc.api.fits.ArcFitsFileJAPI;
import arc.api.device.ArcDeviceJAPI;
import arc.api.device.ArcReplyException;
import arc.api.deinterlace.ArcDeinterlaceJAPI;

/*Note to self: Don't make this runnable. Have a different file for
every action that may be performed. What's more, make a single file
to be the library of H2RG commands. Make sure we can import in a sane
way.*/

public class TemplateFrame extends CCScriptFrame implements SetupListener
{
	private final String RUN_ACTION	 =	"RUN";
	private final String STOP_ACTION =	"ABORT";

	private final String RAMP_CTRL_ACTION 		= "RCTL";
	private final String POINT_CTRL_ACTION		= "PCTL";
	private final String TIME_CTRL_ACTION		= "TCTL";

	JToolBar			m_toolbar;
    
	public TemplateFrame()
	{
		super( "NESSI H2RG Control" );

		m_toolbar = new JToolBar();
		m_toolbar.setFloatable( false );

		super.appendToolbar( m_toolbar );

		getContentPane().add( m_toolbar, BorderLayout.PAGE_START );
		getContentPane().add( createComponents(), BorderLayout.CENTER );

		SetupFrame.addSetupListener( this );

		pack();
		OwlUtilities.centerFrame( this );

		loadPreferences();
	}

	public void destroy()
	{
		dispose();
	}

	public void actionPerformed( ActionEvent event )
	{
		if ( event.getActionCommand().equals( RUN_ACTION ) )
		{
			System.out.println("Run has been detected!");
			System.out.println("Attempting to 'Open Shutter'.");

			ArcDeviceJAPI.SetOpenShutter(true);
		}

		else
		{
			super.actionPerformed( event );
		}
	}

	public void setupChanged( SetupEvent event )
	{
	}

	private JButton createButton( String buttonText, String cmdFlag )
	{
		JButton jButton = new JButton( buttonText );

		jButton.setPreferredSize( new Dimension( 80, 25 ) );
		jButton.setActionCommand( cmdFlag );
		jButton.addActionListener( this );

		return jButton;
	}

	private JButton createButton( String buttonText, String cmdFlag, int width, int height)
	{
		JButton jButton = new JButton( buttonText );

		jButton.setPreferredSize( new Dimension( width, height ) );
		jButton.setActionCommand( cmdFlag );
		jButton.addActionListener( this );

		return jButton;
	}

	private JPanel createComponents()
	{
		JPanel panel = new JPanel();
		panel.setLayout( new GridBagLayout() );
		
		//		addComponent( panel, new JLabel( "test" ), 0, 0, 0, 0, 
		//			  GridBagConstraints.CENTER, 0, 0, 1, 1 );

		// Number of Ramps Control
		OwlNumberField rampControlField = new OwlNumberField( "0", 10 );

		JPanel rampControl = new JPanel( new FlowLayout( FlowLayout.LEFT ) );
		rampControl.add( rampControlField );
		rampControl.add( new JLabel( "Number of ramps" ) );
		
		// Number of Points Control
		OwlNumberField pointControlField = new OwlNumberField( "1", 10 );
		
		JPanel pointControl = new JPanel( new FlowLayout( FlowLayout.LEFT ) );
		pointControl.add( pointControlField );
		pointControl.add( new JLabel( "Number of points on ramp" ) );
		
		// Ramp Time Control
		OwlNumberField timeControlField = new OwlNumberField( "1", 10);

		JPanel timeControl = new JPanel( new FlowLayout( FlowLayout.LEFT ) );
		timeControl.add( timeControlField );
		timeControl.add( new JLabel( "Ramp time" ) );
		
		panel.add( rampControl );
		panel.add( pointControl );
		panel.add( timeControl );

		addComponent( panel, createButton("Configure", RUN_ACTION), 0, 0, 0, 0,
					  GridBagConstraints.CENTER, 0, 0, 1, 1);
		
		return panel;
	}
}

frame = ( CCScriptFrame )( new TemplateFrame() );
frame.setVisible( true );
